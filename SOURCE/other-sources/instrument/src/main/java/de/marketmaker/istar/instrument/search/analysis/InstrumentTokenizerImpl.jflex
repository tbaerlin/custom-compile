package de.marketmaker.istar.instrument.search.analysis;

/**
 * GENERATED BY JFlex FROM IntrumentTokenizerImpl.jflex
 * DO NOT MODIFY MANUALLY
 */

import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.tokenattributes.TermAttribute;

import static de.marketmaker.istar.instrument.search.analysis.InstrumentTokenizer.*;

%%

%class InstrumentTokenizerImpl
%unicode
%integer
%function getNextToken
%pack
%char

%{

public final int yychar()
{
    return yychar;
}

/**
 * Fills Lucene token with the current token text.
 */
final void getText(Token t) {
  t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

/**
 * Fills TermAttribute with the current token text.
 */
final void getText(TermAttribute t) {
  t.setTermBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

%}

// basic word: a sequence of digits & letters (includes Thai to enable ThaiAnalyzer to function)
ALPHANUM   = ({LETTER}|[:digit:])+

// internal apostrophes: O'Reilly, you're, O'Reilly's
// use a post-filter to remove possessives
APOSTROPHE =  {ALPHANUM} ("'" {ALPHANUM})+

// acronyms: U.S.A., I.B.M., etc.
// use a post-filter to remove dots
ACRONYM    =  {LETTER} "." ({LETTER} ".")+

// company names like AT&T, K+S, and Excite@Home.
COMPOSITE    =  {ALPHANUM} (("&"|"@"|"+"|"-"|"."|"_") {ALPHANUM})+

// percent
PERCENT      =  [:digit:]+ ("." [:digit:]+)? "%"
PERCENTCOMMA =  [:digit:]+ ("," [:digit:]+)? "%"

ALPHA      = ({LETTER})+

// From the JFlex manual: "the expression that matches everything of <a> not matched by <b> is !(!<a>|<b>)"
LETTER     = !(![:letter:]|{CJ})

// Chinese and Japanese (but NOT Korean, which is included in [:letter:])
CJ         = [\u3100-\u312f\u3040-\u309F\u30A0-\u30FF\u31F0-\u31FF\u3300-\u337f\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff\uff65-\uff9f]

WHITESPACE = \r\n | [ \r\n\t\f]

%%

{ALPHANUM}          { return ALPHANUM; }
{APOSTROPHE}        { return APOSTROPHE; }
{ACRONYM}           { return ACRONYM; }
{COMPOSITE}         { return COMPOSITE; }
{PERCENT}           { return PERCENT; }
{PERCENTCOMMA}      { return PERCENTCOMMA; }

/** Ignore the rest */
. | {WHITESPACE}                                               { /* ignore */ }
