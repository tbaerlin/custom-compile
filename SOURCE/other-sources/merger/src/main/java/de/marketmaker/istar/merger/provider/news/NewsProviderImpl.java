/*
 * NewsProviderImpl.java
 *
 * Created on 17.07.2006 14:44:48
 *
 * Copyright (c) MARKET MAKER Software AG. All Rights Reserved.
 */
package de.marketmaker.istar.merger.provider.news;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import net.sf.ehcache.Ehcache;
import net.sf.ehcache.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.lucene.search.TermQuery;
import org.joda.time.DateTime;
import org.springframework.jmx.export.annotation.ManagedOperation;
import org.springframework.jmx.export.annotation.ManagedResource;
import org.springframework.util.StringUtils;

import de.marketmaker.istar.domain.instrument.Instrument;
import de.marketmaker.istar.domain.profile.Profile;
import de.marketmaker.istar.domain.profile.Selector;
import de.marketmaker.istar.merger.context.RequestContextHolder;
import de.marketmaker.istar.merger.web.easytrade.block.EasytradeInstrumentProvider;
import de.marketmaker.istar.news.data.NewsRecordImpl;
import de.marketmaker.istar.news.frontend.LatestNewsRequest;
import de.marketmaker.istar.news.frontend.NewsAttributeEnum;
import de.marketmaker.istar.news.frontend.NewsIndexConstants;
import de.marketmaker.istar.news.frontend.NewsRecord;
import de.marketmaker.istar.news.frontend.NewsRequest;
import de.marketmaker.istar.news.frontend.NewsRequestBase;
import de.marketmaker.istar.news.frontend.NewsResponse;
import de.marketmaker.istar.news.frontend.NewsResponseImpl;
import de.marketmaker.istar.news.frontend.NewsServer;

/**
 * @author Oliver Flege
 * @author Thomas Kiesgen
 */
@ManagedResource
public class NewsProviderImpl implements NewsProvider {
    private final Logger logger = LoggerFactory.getLogger(getClass());

    /**
     * Match an iid query with a single iid as generated by
     * {@link de.marketmaker.istar.news.frontend.NewsRequest#iidQuery(java.util.Set)}
     */
    private static final String DEFAULT_CACHEABLE_QUERY_PATTERN = "\\+iid\\(\\s*\\d+\\s*\\)";

    private Pattern cacheableQueryPattern = Pattern.compile(DEFAULT_CACHEABLE_QUERY_PATTERN);

    private Ehcache cache;

    private NewsServer newsServer;
    
    private EasytradeInstrumentProvider instrumentProvider;

    public void setCacheableQueryPattern(String pattern) {
        try {
            this.cacheableQueryPattern = Pattern.compile(pattern);
            this.logger.info("<setCacheableQueryPattern> " + pattern);
        } catch (PatternSyntaxException e) {
            this.logger.warn("<setCacheableQueryPattern> failed", e);
            this.cacheableQueryPattern = null;
        }
    }

    public void setNewsServer(NewsServer newsServer) {
        this.newsServer = newsServer;
    }

    public void setInstrumentProvider(EasytradeInstrumentProvider instrumentProvider) {
        this.instrumentProvider = instrumentProvider;
    }

    public void setCache(Ehcache cache) {
        this.cache = cache;
    }

    @Override
    public NewsResponse getLatestNews(LatestNewsRequest request, boolean withInstruments) {
        final Profile profile = RequestContextHolder.getRequestContext().getProfile();
        if (profile == null) {
            this.logger.warn("<getLatestNews> profile is null for " + request);
            return NewsResponseImpl.getInvalid();
        }
        assignProfile(request, profile);

        final NewsResponse response = this.newsServer.getNews(request);
        if (withInstruments) {
            addInstruments(response);
        }
        return response;
    }

    @Override
    public NewsResponse getNews(NewsRequest request, boolean withInstruments) {
        final Profile profile = RequestContextHolder.getRequestContext().getProfile();
        if (profile == null) {
            this.logger.warn("<getNews> profile is null for " + request);
            return NewsResponseImpl.getInvalid();
        }

        assignProfile(request, profile);

        if (profile.isAllowed(Selector.NEWS_NO_ADS)) {
            request.setWithAds(false);
        }

        final String key = getCacheKey(request, withInstruments, profile);
        if (key != null && this.cache != null) {
            final Element element = this.cache.get(key);
            if (element != null) {
                if (this.logger.isDebugEnabled()) {
                    this.logger.debug("<getNews> in cache for " + request);
                }
                return (NewsResponse) element.getValue();
            }
        }

        if (this.logger.isDebugEnabled()) {
            this.logger.debug("<getNews> submitting " + request);
        }

        final NewsResponse response = this.newsServer.getNews(request);

        if (withInstruments) {
            addInstruments(response);
        }

        if (key != null && this.cache != null) {
            this.cache.put(new Element(key, response));
        }

        return response;
    }

    private void assignProfile(NewsRequestBase request, Profile profile) {
        request.setProfile(profile.toAspectSpecificProfile(Profile.Aspect.NEWS));
    }

    private String getCacheKey(NewsRequest nr, boolean withInstruments, Profile p) {
        if (nr.getOffset() > 0 || nr.getOffsetId() != null
                || nr.getFrom() != null || nr.getTo() != null
                || nr.getNewsids() != null
                ) {
            return null;
        }

        if (nr.getLuceneQuery() != null) {
            if (!(nr.getLuceneQuery() instanceof TermQuery)) {
                return null;
            }
            final TermQuery tq = (TermQuery) nr.getLuceneQuery();
            if (!tq.getTerm().field().equals(NewsIndexConstants.FIELD_IID)) {
                return null;                
            }
        }

        if (StringUtils.hasText(nr.getQuery())) {
            if (this.cacheableQueryPattern == null) {
                return null;
            }
            if (!this.cacheableQueryPattern.matcher(nr.getQuery()).matches()) {
                return null;
            }
        }

        final StringBuilder sb = new StringBuilder(40);
        sb.append(p.getName()).append("|").append(nr.getCount())
                .append("|").append(withInstruments ? "+" : "-")
                .append("|").append(nr.isWithHitCount() ? "+" : "-")
                .append("|").append(nr.isWithText() ? "+" : "-");
        if (StringUtils.hasText(nr.getQuery())) {
            sb.append("|").append(nr.getQuery());
        }
        return sb.toString();
    }

    private void addInstruments(NewsResponse response) {
        final Set<Long> iids = collectIids(response);
        if (iids.isEmpty()) {
            return;
        }

        final Map<String, Instrument> instrumentsById = identify(iids);
        for (final NewsRecord record : response.getRecords()) {
            if (record == null) {
                continue;
            }

            final Set<String> niids = record.getAttributes().get(NewsAttributeEnum.IID);
            if (niids == null) {
                continue;
            }

            final List<Instrument> instruments = new ArrayList<>(niids.size());
            for (final String niid : niids) {
                final Instrument instrument = instrumentsById.get(niid);
                if (instrument != null) {
                    instruments.add(instrument);
                }
            }

            ((NewsRecordImpl) record).setInstruments(instruments);
        }
    }

    private Map<String, Instrument> identify(Set<Long> iids) {
        final List<Instrument> instruments =
                this.instrumentProvider.identifyInstruments(new ArrayList<>(iids));

        final Map<String, Instrument> instrumentsById = new HashMap<>();
        for (final Instrument instrument : instruments) {
            if (instrument != null) {
                instrumentsById.put(Long.toString(instrument.getId()), instrument);
            }
        }
        return instrumentsById;
    }

    private Set<Long> collectIids(NewsResponse response) {
        final Set<Long> iids = new HashSet<>();
        for (final NewsRecord record : response.getRecords()) {
            if(record == null) {
                continue;
            }

            final Set<String> niids = record.getAttributes().get(NewsAttributeEnum.IID);
            if (niids != null) {
                for (final String niid : niids) {
                    iids.add(Long.parseLong(niid));
                }
            }
        }
        return iids;
    }

    @ManagedOperation
    public String dumpCacheKeys() {
        StringBuilder sb = new StringBuilder();
        for (Object key : this.cache.getKeysWithExpiryCheck()) {
            final Element e = this.cache.getQuiet(key);
            if (e != null) {
                NewsResponse n = (NewsResponse) e.getValue();
                sb.append(key)
                        .append(" -> ")
                        .append(" ### ")
                        .append(" | ")
                        .append(e.getHitCount())
                        .append(" | ")
                        .append(new DateTime(e.getLastAccessTime()))
                        .append('\n');
            }
        }
        return sb.toString();

    }
}
